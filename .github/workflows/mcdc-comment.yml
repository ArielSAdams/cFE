name: MCDC Comment

on:
  workflow_run:
    workflows: [Run cFE MCDC]
    types: [completed]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  comment:
    runs-on: ubuntu-22.04
    steps:
      - name: 'Download latest main branch artifact'
        id: main-artifact
        uses: actions/github-script@v7 
        with:
          results-encoding: string
          script: |
            const fs = require('fs');
            
            // Fetch the list of workflow runs for the specific branch
            const workflowRuns = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: 'main',
              status: 'success',  // Optional: only get successful runs
              per_page: 1,        // Limit to the latest run
            });
            
            if (workflowRuns.data.workflow_runs.length === 0) {
              console.log('No workflow runs found for the specified branch');
              console.log('result: "skip"');
              return 'skip';
            }
            
            // Get the latest run ID
            const latestRunId = workflowRuns.data.workflow_runs[0].id;
            
            // Fetch the artifacts for the latest run
            const allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: latestRunId,
            });
            
            const matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "MCDC results"; // Replace with the correct artifact name
            });
            
            if (matchArtifact.length === 0) {
              console.log('No matching artifact found');
              console.log('result: "skip"');
              return 'skip';
            }
            
            // Download the artifact
            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact[0].id,
              archive_format: 'zip',
            });
            
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/main-mcdc-results.zip`, Buffer.from(download.data));

            console.log('Artifact downloaded to `main-mcdc-results.zip`');
            console.log('result: "ok"');
            
            return 'ok';

      - name: 'Download PR artifact'
        id: download-artifact
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const fs = require('fs');

            const allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });

            const matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "MCDC results"
            });

            if (matchArtifact.length === 0) {
              console.log('no matching artifact found');
              console.log('result: "skip"');

              return 'skip';
            }

            const download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact[0].id,
               archive_format: 'zip',
            });

            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/mcdc-results.zip`, Buffer.from(download.data));

            console.log('artifact downloaded to `mcdc-results.zip`');
            console.log('result: "ok"');

            return 'ok';
            
      - name: 'Unzip artifacts'
        if: steps.download-artifact.outputs.result == 'ok'
        run: |
          unzip mcdc-results.zip
          unzip main-mcdc-results.zip

      - name: 'List extracted files for debugging'
        run: ls -R $GITHUB_WORKSPACE

      # add step to reference new script that calculates difference between main artifact and pr artifact

      - name: Post comment to pull request
        if: steps.download-artifact.outputs.result == 'ok'
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            const path = require('path');

            // Adjust the path based on where you see mcdc_results.txt after running the 'ls' command
            const mcdcResultsFilePath = path.join(process.env.GITHUB_WORKSPACE, 'mcdc_results.txt');

            // Debugging: Check if the file exists at the adjusted path
            if (!fs.existsSync(mcdcResultsFilePath)) {
              console.log('mcdc_results.txt file not found at path: ' + mcdcResultsFilePath);
              return;
            }

            const mcdcResults = `MCDC Results:

            \`\`\`
            ${fs.readFileSync(mcdcResultsFilePath, 'utf-8')}
            \`\`\`
            `;

            const prNumber = Number(fs.readFileSync('pr_number'));
            const comments = await github.paginate(
              github.rest.issues.listComments,
              {
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
              }
            );

            comments.reverse();

            const previousComment = comments.find(comment =>
              comment.user.login === 'github-actions[bot]'
            );

            if (previousComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: previousComment.id,
                body: mcdcResults,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: mcdcResults,
              });
            }
