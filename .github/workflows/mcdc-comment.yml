name: MCDC Comment

on:
  workflow_run:
    workflows: [Run cFE MCDC]
    types: [completed]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  comment:
    runs-on: ubuntu-22.04
    steps:
      - name: Download latest artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: mcdc.yml
          branch: main
          name: MCDC results
          path: ./main-branch-results
          
      - name: 'Download PR artifact'
        id: download-artifact
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const fs = require('fs');

            const allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });

            const matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "MCDC results"
            });

            if (matchArtifact.length === 0) {
              console.log('no matching artifact found');
              console.log('result: "skip"');

              return 'skip';
            }

            const download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact[0].id,
               archive_format: 'zip',
            });

            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/mcdc-results.zip`, Buffer.from(download.data));

            console.log('artifact downloaded to `mcdc-results.zip`');
            console.log('result: "ok"');

            return 'ok';
            
      - name: 'Unzip artifacts'
        if: steps.download-artifact.outputs.result == 'ok'
        run: |
          unzip mcdc-results.zip

      - name: 'List extracted files for debugging'
        run: ls -R $GITHUB_WORKSPACE

      - name: Checkout Script
        uses: actions/checkout@v4        
        with:
          ref: main
          sparse-checkout: |
            .github/scripts
        
      # add step to reference new script that calculates difference between main artifact and pr artifact
      - name: Compare main and PR artifacts
        run: |
          # Run comparison between main and PR artifact
          bash .github/scripts/mcdc-compare.sh main-branch-results/mcdc_results.txt mcdc_results.txt

      - name: Comment comparison to pull request
        if: steps.download-artifact.outputs.result == 'ok'
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            const path = require('path');
            // Check if the comparison result file exists
            const comparisonResultsFilePath = path.join(process.env.GITHUB_WORKSPACE, 'comparison_results.txt');
            if (!fs.existsSync(comparisonResultsFilePath)) {
              console.log('comparison_results.txt file not found at path: ' + comparisonResultsFilePath);
              return;
            }

            // Read the comparison results
            const comparisonResults = `MCDC Comparison Results:
            \`\`\`
            ${fs.readFileSync(comparisonResultsFilePath, 'utf-8')}
            \`\`\`
            `;
            
            const prNumber = Number(fs.readFileSync('pr_number'));
            const comments = await github.paginate(
              github.rest.issues.listComments,
              {
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
              }
            );
            comments.reverse();
            const previousComment = comments.find(comment =>
              comment.user.login === 'github-actions[bot]'
            );
            if (previousComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: previousComment.id,
                body: comparisonResults,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comparisonResults,
              });
            }
