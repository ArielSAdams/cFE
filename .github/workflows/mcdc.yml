name: Run cFE MCDC 

on:
  push:
  pull_request:

# Force bash to apply pipefail option so pipeline failures aren't masked
defaults:
  run:
    shell: bash
    
env:
  SIMULATION: native
  ENABLE_UNIT_TESTS: true
  OMIT_DEPRECATED: true
  BUILDTYPE: debug
  
jobs:
  # Checks for duplicate actions. Skips push actions if there is a matching or
  # duplicate pull-request action.
  checks-for-duplicates:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          concurrent_skipping: 'same_content'
          skip_after_successful_duplicate: 'true'
          do_not_skip: '["pull_request", "workflow_dispatch", "schedule"]'

  mcdc:
    needs: checks-for-duplicates
    if: ${{ needs.checks-for-duplicates.outputs.should_skip != 'true' || contains(github.ref, 'main') }}
    name: Build and Run MCDC
    runs-on: ubuntu-20.04
    container: ghcr.io/arielswalker/mcdc:latest

    steps:                  
      - name: Checkout Bundle Main
        uses: actions/checkout@v4
        with:
          submodules: true
          repository: arielswalker/cFS
          ref: test-mcdc        

      - name: Checkout cFE
        uses: actions/checkout@v4        
        with:
          path: cfe
        
      - name: Modify osal to include coverage flags
        run: |
          sed -i '/if (NOT CMAKE_CROSSCOMPILING AND NOT OSAL_OMIT_DEPRECATED)/,/\}/s/set(UT_COVERAGE_COMPILE_FLAGS.*/set(UT_COVERAGE_COMPILE_FLAGS -pg -O0 -fprofile-arcs -ftest-coverage -fcondition-coverage -fprofile-abs-path)/' osal/src/bsp/generic-linux/build_options.cmake
          sed -i '/if (NOT CMAKE_CROSSCOMPILING AND NOT OSAL_OMIT_DEPRECATED)/,/\}/s/set(UT_COVERAGE_LINK_FLAGS.*/set(UT_COVERAGE_LINK_FLAGS -pg -O0 -fprofile-arcs -ftest-coverage -fcondition-coverage -fprofile-abs-path)/' osal/src/bsp/generic-linux/build_options.cmake
        
      - name: Set up for build
        run: |
          cp ./cfe/cmake/Makefile.sample Makefile
          cp -r ./cfe/cmake/sample_defs sample_defs
          make prep
          make -C build mission-prebuild

      - name: Build
        run: |
          make -C build/native/default_cpu1/config
          make -C build/native/default_cpu1/core_api
          make -C build/native/default_cpu1/core_private
          make -C build/native/default_cpu1/es
          make -C build/native/default_cpu1/evs
          make -C build/native/default_cpu1/fs
          make -C build/native/default_cpu1/msg
          make -C build/native/default_cpu1/resourceid
          make -C build/native/default_cpu1/sb
          make -C build/native/default_cpu1/sbr
          make -C build/native/default_cpu1/tbl
          make -C build/native/default_cpu1/time

      - name: Test
        run: |
          (cd build/native/default_cpu1/config && ctest --output-on-failure) | tee -a test_results.txt
          (cd build/native/default_cpu1/core_api && ctest --output-on-failure) | tee -a test_results.txt
          (cd build/native/default_cpu1/core_private && ctest --output-on-failure) | tee -a test_results.txt
          (cd build/native/default_cpu1/es && ctest --output-on-failure) | tee -a test_results.txt
          (cd build/native/default_cpu1/evs && ctest --output-on-failure) | tee -a test_results.txt
          (cd build/native/default_cpu1/fs && ctest --output-on-failure) | tee -a test_results.txt
          (cd build/native/default_cpu1/msg && ctest --output-on-failure) | tee -a test_results.txt
          (cd build/native/default_cpu1/resourceid && ctest --output-on-failure) | tee -a test_results.txt
          (cd build/native/default_cpu1/sb && ctest --output-on-failure) | tee -a test_results.txt
          (cd build/native/default_cpu1/sbr && ctest --output-on-failure) | tee -a test_results.txt
          (cd build/native/default_cpu1/tbl && ctest --output-on-failure) | tee -a test_results.txt
          (cd build/native/default_cpu1/time && ctest --output-on-failure) | tee -a test_results.txt

      - name: Grab test modules
        if: success() || failure()
        run: |
          echo "MODULES=$(grep -oP 'Test #\d+: \K[\w\-\_]+' test_results.txt | tr '\n' ' ' | sed 's/ $//')" >> $GITHUB_ENV
          
      - name: Run mcdc analysis
        if: success() || failure()
        run: bash .github/scripts/mcdc-analyze.sh

      - name: Save PR number
        if: github.event_name == 'pull_request'
        env:
          PR_NUMBER: ${{ github.event.number }}
        run: echo $PR_NUMBER > pr_number

      - name: Get Latest Successful Run from `main` Branch
        id: get_main_run
        uses: octokit/request-action@v2
        with:
          route: GET /repos/${{ github.repository }}/actions/runs
          headers: '{"accept": "application/vnd.github.v3+json"}'
          data: '{"status": "success", "branch": "main"}'

      - name: Download Artifact from Latest Main Run
        id: download_artifact
        run: |
          # Get the latest successful run ID from the previous step
          latest_run_id=$(echo "${{ steps.get_main_run.outputs.data }}" | jq '.[0].id')

          if [ -z "$latest_run_id" ]; then
            echo "No successful runs found for the main branch."
            exit 1
          fi

          echo "Latest successful run ID: $latest_run_id"
          
          # Get the artifact ID associated with this run (assuming the artifact is named 'MCDC results')
          artifact_id=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${latest_run_id}/artifacts" | \
            jq -r '.artifacts[] | select(.name == "MCDC results") | .id')

          if [ -z "$artifact_id" ]; then
            echo "No 'MCDC results' artifact found."
            exit 1
          fi

          # Download the artifact
          curl -sL \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${artifact_id}/zip" \
            -o mcdc-results.zip

      - name: Unzip the downloaded artifact
        run: |
          unzip "MCDC Results.zip" -d mcdc_main_branch
          echo "Artifact unzipped to mcdc_main_branch directory"

      - name: Rename extracted files/folder
        run: |
          # Rename the mcdc-results.txt file
          mv mcdc_main_branch/mcdc_results.txt mcdc_main_branch/main_mcdc_results.txt
          echo "Renamed 'mcdc_results.txt' to 'main_mcdc_results.txt'"

      - name: Archive unit test results
        # Upload if success or failure which supports skipping, unlike always()
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: Unit test results
          path: |
            test_results.txt
      
      - name: Archive mcdc results
        # Upload if success or failure which supports skipping, unlike always()
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: MCDC results
          path: |
            **/*.gcov
            mcdc_results.txt
            pr_number
            mcdc_main_branch/main_mcdc_results.txt
